<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_SpindleZ" Id="{93b6d370-9060-40d7-8101-95f7e4ba6901}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_SpindleZ EXTENDS FB_PackML_BaseModule
VAR
    // Sub module definitions here

    // List of sub modules
    ipSubModules_Init : ARRAY[1..Parameters_PackML_Base.MAX_NO_OF_SUBMODULES] OF I_PackML_BaseModule := [];

    // Component definitions here
    Axis   : FB_Component_BasicAxis := (Name := 'Axis');
    Sensor : FB_DigitalSensor       := (Name := 'Sensor');

    //Alarms for this module
    SpindleAlarms : ARRAY[1..SPINDLE_ALARM_COUNT] OF FB_TcAlarm;

    //Data for recipe


    (*Parameters from PackTags for module
    //_Param  : ARRAY[1..10] OF ST_Descriptor2;*)
    _Report : ARRAY[1..10] OF ST_Descriptor2;

    //HMI Control for EM
    fbControlSourceHMI : FB_ControlSource_HMI;
END_VAR

VAR CONSTANT
    //reports 
    FAULT : INT := 1;

    //Alarms
    SPINDLE_ALARM_COUNT : INT := 5;
END_VAR

//Simulation variables for messaging
VAR
    ErrorInput : BOOL;
    WarnInput  : BOOL;
    InfoInput  : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CreateEvents" Id="{99ddd031-78aa-46a7-b2f9-f0b68a19d02e}">
      <Declaration><![CDATA[METHOD PROTECTED CreateEvents
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Add your event creation here
F_CreateAllEventsInClass(Alarms     := SpindleAlarms,
                         ClassSize  := SIZEOF(TC_EVENTS.Spindle),
                         pInitEvent := ADR(TC_EVENTS.Spindle.InitReferenceEvent),
                         Prefix     := Name);

// Super call to base
SUPER^.CreateEvents();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic" Id="{ea09e275-dd4c-4ec1-a323-7e0cfd7e21cd}">
      <Declaration><![CDATA[METHOD CyclicLogic
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _InitComplete THEN
    _InitComplete := Initialize();
    RETURN;
END_IF

SUPER^.CyclicLogic();

//HMI control for EM
fbControlSourceHMI.CyclicLogic();

//Set the current alarm severity for this module
_CurrentAlarmSeverity := F_GetMaxSeverityRaised(Alarms := SpindleAlarms, CurrentSeverity := _CurrentAlarmSeverity);
IF _CurrentAlarmSeverity >= TcEventSeverity.Error THEN
    ChangeState(E_PMLCommand.ePMLCommand_Abort);
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{59d1fe7d-28ec-4cbf-a3ef-81f06735b3ba}">
      <Declaration><![CDATA[METHOD PROTECTED Initialize : BOOL;
VAR
    i                        : UDINT;
    varInfo                  : __SYSTEM.VAR_INFO;
    AllSubUnitsInitialized   : BOOL := TRUE;
    AllComponentsInitialized : BOOL := TRUE;
END_VAR

//! @description This method is called by <c>CyclicLogic()</c> as required]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
    0:
		RegisterComponent(Axis);
		RegisterComponent(Sensor);
        _LogModeChanges         := TRUE;
        _LogStateChanges        := TRUE;
        DescendantSequenceState := DescendantSequenceState + 10;
    10:
        //Setup Custom modes here
        DescendantSequenceState := DescendantSequenceState + 10;
    20:
        //Copy Mode names
        FOR i := 1 TO 3 DO
            ModeNames[i] := F_UnitModeToString(UDINT_TO_DINT(i));
        END_FOR

 
		RegisterExternalController(Controller := fbControlSourceHMI);
		fbControlSourceHMI.CyclicLogic();
		
		//Set the Parent Response here
		_ParentFaultResponseDefinitions[TcEventSeverity.Error] := E_AlarmResponse.Hold_Immediate;
        DescendantSequenceState := DescendantSequenceState + 10;
    30:
        //Call the Super
        IF SUPER^.Initialize() THEN
            DescendantSequenceState := DescendantSequenceState + 10;
        END_IF
    40:
        Initialize := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="RaiseTwoArgumentAlarm" Id="{7b5fcd4f-47a7-4be3-b737-1f985fad3866}">
      <Declaration><![CDATA[METHOD RaiseTwoArgumentAlarm
VAR_IN_OUT
    Alarm : FB_TcAlarm; //Alarm to be raised
END_VAR

VAR_INPUT
    String_1 : STRING; //First String Parameter (The Name of this component will be applied first automatically)
    String_2 : STRING; //Second String Parameter
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[F_RaiseAlarmWithStringParameters(Alarm    := Alarm,
                                 String_1 := Name,
                                 String_2 := String_1,
                                 String_3 := String_2);]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_SpindleZ">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SpindleZ.CreateEvents">
      <LineId Id="3" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SpindleZ.CyclicLogic">
      <LineId Id="3" Count="15" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SpindleZ.Initialize">
      <LineId Id="3" Count="4" />
      <LineId Id="70" Count="0" />
      <LineId Id="9" Count="3" />
      <LineId Id="39" Count="20" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_SpindleZ.RaiseTwoArgumentAlarm">
      <LineId Id="3" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>