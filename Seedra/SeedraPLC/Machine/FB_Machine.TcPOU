<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Machine" Id="{d5c1a520-7f34-4388-b108-926928c14741}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Machine EXTENDS FB_PackML_BaseModule // IMPLEMENTS I_ControlsProductionRate
VAR
    // Sub Modules
    GantryXY   : FB_GantryXY  := (Name := 'Gantry', LogStateChanges := TRUE);
    SpindleZ   : FB_SpindleZ    := (Name := 'Spindle', LogStateChanges := TRUE);

    // Components
	
    //Initial List of Components
    ipComponents_Init : ARRAY[1..Parameters_PackML_Base.MAX_NO_OF_COMPONENTS] OF I_ComponentBase := [];

    //Alarms for this module
    MachineAlarms : ARRAY[1..MACHINE_ALARM_COUNT] OF FB_TcAlarm;
	

    //Get Data From PackML? Else RecipeManager is running
    DataFromPackML : BOOL := TRUE;

    //Data 
    

    gantrylTimeStart : ULINT;
    gantryTimeEnd   : ULINT;
    gantryTime   : LREAL;

    partTimeStart : ULINT;
    partTimeEnd   : ULINT;
    partTime      : LREAL;
    parts         : DINT;
    product       : DINT;

    //Pack Tags for System
    {attribute 'OPC.UA.DA' := '1'}
    _PackTags : ST_PackMLv30Ext; //ST_PackMLv30 is obsolete in Tc3_PackML_V2
END_VAR

VAR CONSTANT
    //PackTag parameter IDs
    LENGTH         : INT := 1;
    SEALTEMP       : INT := 2;
    SEALTIME       : INT := 3;
    GANTRY_VEL     : INT := 4;
    GANTRY_ACC     : INT := 5;
  //S3ALER_VEL     : INT := 6;
 // S3ALER_ACC     : INT := 7;
    UNWIND_VEL     : INT := 8;
    UNWIND_ACC     : INT := 9;
    OPEN_POS       : INT := 10;
    CLOSED_POS     : INT := 11;

    //Alarm count constant
    MACHINE_ALARM_COUNT : INT := 6;
END_VAR

// Simulation variables
VAR
    EstopInput  : BOOL;
    LowAirInput : BOOL;
    ErrorInput  : BOOL;
    WarnInput   : BOOL;
    InfoInput   : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CreateEvents" Id="{3ef7297b-dc6e-4a47-8d8e-332da0b8eab2}">
      <Declaration><![CDATA[METHOD PROTECTED CreateEvents
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Add your event creation here
F_CreateAllEventsInClass(Alarms     := MachineAlarms,
                         ClassSize  := SIZEOF(TC_Events.Seedra),
                         pInitEvent := ADR(TC_EVENTS.Seedra.InitReferenceEvent),
                         Prefix     := Name);

// Super call to base
SUPER^.CreateEvents();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic" Id="{3a2f2751-120e-49d4-84e7-dd5883d6841e}">
      <Declaration><![CDATA[METHOD CyclicLogic
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _InitComplete THEN
    _InitComplete := Initialize();
    RETURN;
END_IF

SUPER^.CyclicLogic();

// Fill in the PackTags for the machine output
_PackTags.Status.StateCurrent    := _CurrentState;
_PackTags.Status.UnitModeCurrent := _CurrentMode;


//This is just to simulate some IO for alarms
CyclicLogic_Simulation();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic_Simulation" Id="{71f5236c-9d28-412c-8bd3-07ce42ed551f}">
      <Declaration><![CDATA[METHOD CyclicLogic_Simulation
VAR_INPUT
END_VAR

VAR_INST
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[(*	
This is just for testing. Real hardware can be setup in other places
Here the alarms will raise and clear on its own if the input changes	
*)
IF EstopInput AND NOT MachineAlarms[E_Seedra.EmergencyStop].bRaised THEN
    RaiseTwoArgumentAlarm(MachineAlarms[E_Seedra.EmergencyStop], '', '');
ELSIF NOT EstopInput AND MachineAlarms[E_Seedra.EmergencyStop].bRaised THEN
    MachineAlarms[E_Seedra.EmergencyStop].Clear(0, 0);
END_IF

IF LowAirInput AND NOT MachineAlarms[E_Seedra.LowAir].bRaised THEN
    RaiseTwoArgumentAlarm(MachineAlarms[E_Seedra.LowAir], '', '');
ELSIF NOT LowAirInput AND MachineAlarms[E_Seedra.LowAir].bRaised THEN
    MachineAlarms[E_Seedra.LowAir].Clear(0, 0);
END_IF

//Generic Alarms for Testing
//IF ErrorInput AND NOT MachineAlarms[E_Seedra.AlarmMessage].bRaised THEN
//    RaiseAlarm2Args(MachineAlarms[E_Seedra.AlarmMessage], '', '');
//ELSIF NOT ErrorInput AND MachineAlarms[E_Seedra.AlarmMessage].bRaised THEN
//    MachineAlarms[E_Seedra.AlarmMessage].Clear(0, 0);
//END_IF

//IF WarnInput AND NOT MachineAlarms[E_Seedra.WarnMessage].bRaised THEN
//    RaiseAlarm2Args(MachineAlarms[E_Seedra.WarnMessage], '', '');
//ELSIF NOT WarnInput AND MachineAlarms[E_Seedra.WarnMessage].bRaised THEN
//    MachineAlarms[E_Seedra.WarnMessage].Clear(0, 0);
//END_IF

//IF InfoInput AND NOT MachineAlarms[E_Seedra.InfoMessage].bRaised THEN
//    RaiseAlarm2Args(MachineAlarms[E_Seedra.InfoMessage], '', '');
//ELSIF NOT InfoInput AND MachineAlarms[E_Seedra.InfoMessage].bRaised THEN
//    MachineAlarms[E_Seedra.InfoMessage].Clear(0, 0);
//END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="HMIPermissions" Id="{01f1aea6-e802-48f8-abd4-50a2a3d31fba}">
      <Declaration><![CDATA[METHOD PROTECTED HMIPermissions
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[ //BlockHMIControl();
//General Mode Based Monitoring and handling of HMI control
CASE _CurrentMode OF
   
 E_PMLUnitMode.ePMLUnitMode_Production:
 
 	AllowHMIControl(ThisModuleOnly := FALSE);
 
//        CASE _CurrentState OF
//            E_PMLState.ePMLState_Stopped:
//                AllowHMIControl(ThisModuleOnly := FALSE); //Allow control for recovery
//            E_PMLState.ePMLState_Idle:
//				AllowHMIControl(ThisModuleOnly := FALSE); //Allow control for recovery
//            E_PMLState.ePMLState_Suspended:
//                AllowHMIControl(ThisModuleOnly := FALSE); //Allow control for recovery
//            E_PMLState.ePMLState_Execute:
//                AllowHMIControl(ThisModuleOnly := FALSE); //Allow control for recovery
//            E_PMLState.ePMLState_Aborted:
//                AllowHMIControl(ThisModuleOnly := FALSE); //Allow control for recovery
//            E_PMLState.ePMLState_Held:
//                AllowHMIControl(ThisModuleOnly := FALSE); //Allow control for recovery
//            E_PMLState.ePMLState_Complete:
//				AllowHMIControl(ThisModuleOnly := FALSE); //Allow control for recovery
//        END_CASE
		
      
    E_PMLUnitMode.ePMLUnitMode_Manual:
        AllowHMIControl(ThisModuleOnly := FALSE);
    E_PMLUnitMode.ePMLUnitMode_Maintenance:
        AllowHMIControl(ThisModuleOnly := FALSE);
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="HoldImmediateAlarmHandling" Id="{84b7ed94-99a4-4ce2-a25d-701c2131ac5b}">
      <Declaration><![CDATA[METHOD PROTECTED HoldImmediateAlarmHandling
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ChangeState(E_PMLCommand.ePMLCommand_Hold);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{c8e5bfb3-7a5f-4315-8e43-29ab3e5bd8c9}">
      <Declaration><![CDATA[METHOD PROTECTED Initialize : BOOL
VAR
    i : UDINT; //Generic iteration value
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
    0:
		RegisterSubmodule(GantryXY);
		RegisterSubmodule(SpindleZ);
		
        _LogModeChanges         := TRUE;
        _LogStateChanges        := TRUE;
        DescendantSequenceState := DescendantSequenceState + 10;
    10:
        //Setup Custom modes here
        DescendantSequenceState := DescendantSequenceState + 10;
    20:
        //Copy Mode names
        FOR i := 1 TO 3 DO
            ModeNames[i] := F_UnitModeToString(UDINT_TO_DINT(i));
        END_FOR

        DescendantSequenceState := DescendantSequenceState + 10;
    30:
        // Initialize Recipes 

        DescendantSequenceState := DescendantSequenceState + 10;
    40:
        //Call the Super
        IF SUPER^.Initialize() THEN
            DescendantSequenceState := DescendantSequenceState + 10;
        END_IF
    50:
        Initialize := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="RaiseTwoArgumentAlarm" Id="{45171f7d-6922-46eb-a058-ee14fb1eff75}">
      <Declaration><![CDATA[METHOD RaiseTwoArgumentAlarm
VAR_IN_OUT
    Alarm : FB_TcAlarm; //Alarm to be raised
END_VAR

VAR_INPUT
    String_1 : STRING; //First String Parameter (The Name of this component will be applied first automatically)
    String_2 : STRING; //Second String Parameter
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[F_RaiseAlarmWithStringParameters(Alarm    := Alarm,
                                 String_1 := Name,
                                 String_2 := String_1,
                                 String_3 := String_2);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SubModuleMonitor" Id="{dcbc78eb-4598-4276-aefb-1642881bb3aa}">
      <Declaration><![CDATA[METHOD PROTECTED SubModuleMonitor : BOOL
VAR
    AlarmResponses : ARRAY[0..4] OF E_AlarmResponse; //Temporary response array	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Check the sub Modules for Alarm Severity
SUPER^.SubModuleMonitor();

//Check the alarms at the machine level
_CurrentAlarmSeverity := F_GetMaxSeverityRaised(Alarms := MachineAlarms, CurrentSeverity := _CurrentAlarmSeverity);

//Check the severity of the machine level alarms
IF _CurrentState <> E_PMLState.ePMLState_Aborted AND _CurrentState <> E_PMLState.ePMLState_Aborting AND _CurrentState <> E_PMLState.ePMLState_Clearing AND
   _CurrentState <> E_PMLState.ePMLState_Stopped AND _CurrentState <> E_PMLState.ePMLState_Stopping THEN
    AlarmResponses := _ParentFaultResponseDefinitions;
    CASE AlarmResponses[CurrentAlarmSeverity] OF
        E_AlarmResponse.Abort_ImmediateError:
            AbortImmediateError(Name, TRUE);
        E_AlarmResponse.Abort_Immediate:
            AbortImmediate();
        E_AlarmResponse.Stop_Immediate:
            StopImmediate();
        E_AlarmResponse.Stop_Controlled:
            StopControlled();
        E_AlarmResponse.Hold_Immediate:
            HoldImmediateAlarmHandling();
        E_AlarmResponse.Suspend_Immediate:
            SuspendImmediate();
        E_AlarmResponse.Suspend_Controlled:
            SuspendControlled();
        E_AlarmResponse.NoResponse:
            ;
    END_CASE
ELSIF _CurrentState = E_PMLState.ePMLState_Stopped OR _CurrentState = E_PMLState.ePMLState_Stopping THEN
    AlarmResponses := _ParentFaultResponseDefinitions;
    CASE AlarmResponses[CurrentAlarmSeverity] OF
        E_AlarmResponse.Abort_ImmediateError:
            AbortImmediateError(Name, TRUE);
        E_AlarmResponse.Abort_Immediate:
            AbortImmediate();
        E_AlarmResponse.NoResponse:
            ;
    END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Machine">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.CreateEvents">
      <LineId Id="3" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.CyclicLogic">
      <LineId Id="3" Count="12" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.CyclicLogic_Simulation">
      <LineId Id="41" Count="32" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.HMIPermissions">
      <LineId Id="31" Count="0" />
      <LineId Id="3" Count="2" />
      <LineId Id="32" Count="0" />
      <LineId Id="46" Count="0" />
      <LineId Id="48" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="6" Count="0" />
      <LineId Id="33" Count="12" />
      <LineId Id="21" Count="7" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.HoldImmediateAlarmHandling">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Initialize">
      <LineId Id="3" Count="10" />
      <LineId Id="40" Count="18" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.RaiseTwoArgumentAlarm">
      <LineId Id="3" Count="2" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.SubModuleMonitor">
      <LineId Id="3" Count="37" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>