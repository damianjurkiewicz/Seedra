<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Machine" Id="{d5c1a520-7f34-4388-b108-926928c14741}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Machine EXTENDS FB_PackML_BaseModule // IMPLEMENTS I_ControlsProductionRate
VAR
    // Sub Modules
    GantryXY   : FB_GantryXY  := (Name := 'Gantry', LogStateChanges := TRUE);
    SpindleZ   : FB_SpindleZ    := (Name := 'Spindle', LogStateChanges := TRUE);

    // Components

    //Initial List of Components
    ipComponents_Init : ARRAY[1..Parameters_PackML_Base.MAX_NO_OF_COMPONENTS] OF I_ComponentBase := [];

    //Alarms for this module
    MachineAlarms : ARRAY[1..MACHINE_ALARM_COUNT] OF FB_TcAlarm;
	
	//Current Recipe Name
	CurrentRecipeName : STRING;

    //Get Data From PackML? Else RecipeManager is running
    DataFromPackML : BOOL := TRUE;

    //Data 
    sealTimeStart : ULINT;
    sealTimeEnd   : ULINT;
    sealingTime   : LREAL;
    sealTrig      : R_TRIG;
    gantrylTimeStart : ULINT;
    gantryTimeEnd   : ULINT;
    gantryTime   : LREAL;
    gantryTrig      : R_TRIG;
    partTimeStart : ULINT;
    partTimeEnd   : ULINT;
    partTime      : LREAL;
    parts         : DINT;
    product       : DINT;

    //Pack Tags for System
    {attribute 'OPC.UA.DA' := '1'}
    _PackTags : ST_PackMLv30Ext; //ST_PackMLv30 is obsolete in Tc3_PackML_V2
END_VAR

VAR CONSTANT
    //PackTag parameter IDs
    LENGTH         : INT := 1;
    SEALTEMP       : INT := 2;
    SEALTIME       : INT := 3;
    GANTRY_VEL     : INT := 4;
    GANTRY_ACC     : INT := 5;
  //S3ALER_VEL     : INT := 6;
 // S3ALER_ACC     : INT := 7;
    UNWIND_VEL     : INT := 8;
    UNWIND_ACC     : INT := 9;
    OPEN_POS       : INT := 10;
    CLOSED_POS     : INT := 11;

    //Alarm count constant
    MACHINE_ALARM_COUNT : INT := 6;
END_VAR

// Simulation variables
VAR
    EstopInput  : BOOL;
    LowAirInput : BOOL;
    ErrorInput  : BOOL;
    WarnInput   : BOOL;
    InfoInput   : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CreateEvents" Id="{3ef7297b-dc6e-4a47-8d8e-332da0b8eab2}">
      <Declaration><![CDATA[METHOD PROTECTED CreateEvents
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Add your event creation here
F_CreateAllEventsInClass(Alarms     := MachineAlarms,
                         ClassSize  := SIZEOF(TC_Events.Seedra),
                         pInitEvent := ADR(TC_EVENTS.Seedra.InitReferenceEvent),
                         Prefix     := Name);
// Super call to base
SUPER^.CreateEvents();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic" Id="{3a2f2751-120e-49d4-84e7-dd5883d6841e}">
      <Declaration><![CDATA[METHOD CyclicLogic
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _InitComplete THEN
    _InitComplete := Initialize();
    RETURN;
END_IF

SUPER^.CyclicLogic();


]]></ST>
      </Implementation>
    </Method>
    <Method Name="HMIPermissions" Id="{01f1aea6-e802-48f8-abd4-50a2a3d31fba}">
      <Declaration><![CDATA[METHOD PROTECTED HMIPermissions
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//General Mode Based Monitoring and handling of HMI control
CASE _CurrentMode OF
   
 E_PMLUnitMode.ePMLUnitMode_Production:
        CASE _CurrentState OF
            E_PMLState.ePMLState_Stopped:
				AllowHMIControl(ThisModuleOnly := FALSE);
            E_PMLState.ePMLState_Idle:
				AllowHMIControl(ThisModuleOnly := FALSE);
            E_PMLState.ePMLState_Suspended:
         		AllowHMIControl(ThisModuleOnly := FALSE);
            E_PMLState.ePMLState_Execute:
            	AllowHMIControl(ThisModuleOnly := FALSE); 
            E_PMLState.ePMLState_Aborted:
                AllowHMIControl(ThisModuleOnly := FALSE); 
            E_PMLState.ePMLState_Held:
                AllowHMIControl(ThisModuleOnly := FALSE); 
            E_PMLState.ePMLState_Complete:
          		AllowHMIControl(ThisModuleOnly := FALSE); 
        END_CASE
		
    E_PMLUnitMode.ePMLUnitMode_Manual:
        AllowHMIControl(ThisModuleOnly := FALSE); 
	E_PMLUnitMode.ePMLUnitMode_Maintenance:
        AllowHMIControl(ThisModuleOnly := FALSE); 
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{c8e5bfb3-7a5f-4315-8e43-29ab3e5bd8c9}">
      <Declaration><![CDATA[METHOD PROTECTED Initialize : BOOL
VAR
    i : UDINT; //Generic iteration value
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
    0:
		RegisterSubmodule(GantryXY);
		RegisterSubmodule(SpindleZ);
		
        _LogModeChanges         := TRUE;
        _LogStateChanges        := TRUE;
        DescendantSequenceState := DescendantSequenceState + 10;
    10:
        //Setup Custom modes here

        (*CustomModes(eMode                          :=,
                    sName                          :=,
                    bDisableClearing               :=,
                    bDisableStarting               :=,
                    bDisableSuspended              :=,
                    bDisableStopping               :=,
                    bDisableAborting               :=,
                    bDisableHolding                :=,
                    bDisableHeld                   :=,
                    bDisableUnholding              :=,
                    bDisableSuspending             :=,
                    bDisableUnsuspending           :=,
                    bDisableResetting              :=,
                    bDisableIdle                   :=,
                    bDisableCompleting             :=,
                    bDisableComplete               :=,
                    bEnableUnitModeChangeStopped   :=,
                    bEnableUnitModeChangeIdle      :=,
                    bEnableUnitModeChangeSuspended :=,
                    bEnableUnitModeChangeExecute   :=,
                    bEnableUnitModeChangeAborted   :=,
                    bEnableUnitModeChangeHeld      :=,
                    bEnableUnitModeChangeComplete  :=,
                    bError                         =>,
                    nErrorId                       =>);*)
        DescendantSequenceState := DescendantSequenceState + 10;
    20:
        //Copy Mode names
        FOR i := 1 TO 3 DO
            ModeNames[i] := F_UnitModeToString(UDINT_TO_DINT(i));
        END_FOR

        DescendantSequenceState := DescendantSequenceState + 10;
    30:
        // Initialize Recipes 

        DescendantSequenceState := DescendantSequenceState + 10;
    40:
        //Call the Super
        IF SUPER^.Initialize() THEN
            DescendantSequenceState := DescendantSequenceState + 10;
        END_IF
    50:
        Initialize := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_Machine">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.CreateEvents">
      <LineId Id="3" Count="4" />
      <LineId Id="9" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.CyclicLogic">
      <LineId Id="3" Count="5" />
      <LineId Id="13" Count="1" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.HMIPermissions">
      <LineId Id="3" Count="2" />
      <LineId Id="35" Count="0" />
      <LineId Id="6" Count="1" />
      <LineId Id="9" Count="1" />
      <LineId Id="12" Count="11" />
      <LineId Id="34" Count="0" />
      <LineId Id="33" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="29" Count="0" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_Machine.Initialize">
      <LineId Id="3" Count="55" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>