<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_Machine" Id="{d5c1a520-7f34-4388-b108-926928c14741}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_Machine EXTENDS FB_PackML_BaseModule // IMPLEMENTS I_ControlsProductionRate
VAR
    // Sub Modules
    GantryXY   : FB_GantryXY  := (Name := 'Gantry', LogStateChanges := TRUE);
    SpindleZ   : FB_SpindleZ    := (Name := 'Spindle', LogStateChanges := TRUE);

    // Components

    //Initial List of Components
    ipComponents_Init : ARRAY[1..Parameters_PackML_Base.MAX_NO_OF_COMPONENTS] OF I_ComponentBase := [];

    //Alarms for this module
    MachineAlarms : ARRAY[1..MACHINE_ALARM_COUNT] OF FB_TcAlarm;
	
	//Current Recipe Name
	CurrentRecipeName : STRING;

    //Get Data From PackML? Else RecipeManager is running
    DataFromPackML : BOOL := TRUE;

    //Data 
    sealTimeStart : ULINT;
    sealTimeEnd   : ULINT;
    sealingTime   : LREAL;
    sealTrig      : R_TRIG;
    gantrylTimeStart : ULINT;
    gantryTimeEnd   : ULINT;
    gantryTime   : LREAL;
    gantryTrig      : R_TRIG;
    partTimeStart : ULINT;
    partTimeEnd   : ULINT;
    partTime      : LREAL;
    parts         : DINT;
    product       : DINT;

    //Pack Tags for System
    {attribute 'OPC.UA.DA' := '1'}
    _PackTags : ST_PackMLv30Ext; //ST_PackMLv30 is obsolete in Tc3_PackML_V2
END_VAR

VAR CONSTANT
    //PackTag parameter IDs
    LENGTH         : INT := 1;
    SEALTEMP       : INT := 2;
    SEALTIME       : INT := 3;
    GANTRY_VEL     : INT := 4;
    GANTRY_ACC     : INT := 5;
  //S3ALER_VEL     : INT := 6;
 // S3ALER_ACC     : INT := 7;
    UNWIND_VEL     : INT := 8;
    UNWIND_ACC     : INT := 9;
    OPEN_POS       : INT := 10;
    CLOSED_POS     : INT := 11;

    //Alarm count constant
    MACHINE_ALARM_COUNT : INT := 6;
END_VAR

// Simulation variables
VAR
    EstopInput  : BOOL;
    LowAirInput : BOOL;
    ErrorInput  : BOOL;
    WarnInput   : BOOL;
    InfoInput   : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CreateEvents" Id="{3ef7297b-dc6e-4a47-8d8e-332da0b8eab2}">
      <Declaration><![CDATA[METHOD PROTECTED CreateEvents
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Add your event creation here
F_CreateAllEventsInClass(Alarms     := MachineAlarms,
                         ClassSize  := SIZEOF(TC_Events.Seedra),
                         pInitEvent := ADR(TC_EVENTS.Seedra.InitReferenceEvent),
                         Prefix     := Name);

// Super call to base
SUPER^.CreateEvents();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic" Id="{3a2f2751-120e-49d4-84e7-dd5883d6841e}">
      <Declaration><![CDATA[METHOD CyclicLogic
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _InitComplete THEN
    _InitComplete := Initialize();
    RETURN;
END_IF

SUPER^.CyclicLogic();

// Fill in the PackTags for the machine output
_PackTags.Status.StateCurrent    := _CurrentState;
_PackTags.Status.UnitModeCurrent := _CurrentMode;
UpdateModeTimers();

]]></ST>
      </Implementation>
    </Method>
    <Method Name="HMIPermissions" Id="{01f1aea6-e802-48f8-abd4-50a2a3d31fba}">
      <Declaration><![CDATA[METHOD PROTECTED HMIPermissions
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[//General Mode Based Monitoring and handling of HMI control
CASE _CurrentMode OF
    E_PMLUnitMode.ePMLUnitMode_Production:
        CASE _CurrentState OF
            E_PMLState.ePMLState_Stopped:

				AllowHMIControl(ThisModuleOnly := FALSE);
            E_PMLState.ePMLState_Idle:
                //BlockHMIControl();
				AllowHMIControl(ThisModuleOnly := FALSE); //Allow control for recovery
            E_PMLState.ePMLState_Suspended:
           AllowHMIControl(ThisModuleOnly := FALSE); //Allow control for recovery
            E_PMLState.ePMLState_Execute:
            AllowHMIControl(ThisModuleOnly := FALSE); //Allow control for recovery
            E_PMLState.ePMLState_Aborted:
                AllowHMIControl(ThisModuleOnly := FALSE); //Allow control for recovery
            E_PMLState.ePMLState_Held:
                AllowHMIControl(ThisModuleOnly := FALSE); //Allow control for recovery
            E_PMLState.ePMLState_Complete:
          AllowHMIControl(ThisModuleOnly := FALSE); //Allow control for recovery
        END_CASE
		
        //AllowHMIControl(ThisModuleOnly := FALSE);
    E_PMLUnitMode.ePMLUnitMode_Manual:
        AllowHMIControl(ThisModuleOnly := FALSE); //Allow control for recovery
    E_PMLUnitMode.ePMLUnitMode_Maintenance:
         AllowHMIControl(ThisModuleOnly := FALSE); //Allow control for recovery
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="HoldImmediate" Id="{84b7ed94-99a4-4ce2-a25d-701c2131ac5b}">
      <Declaration><![CDATA[METHOD PROTECTED HoldImmediate
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ChangeState(E_PMLCommand.ePMLCommand_Hold);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{c8e5bfb3-7a5f-4315-8e43-29ab3e5bd8c9}">
      <Declaration><![CDATA[METHOD PROTECTED Initialize : BOOL
VAR
    i : UDINT; //Generic iteration value
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
    0:
		RegisterSubmodule(GantryXY);
		RegisterSubmodule(SpindleZ);
		
        _LogModeChanges         := FALSE;
        _LogStateChanges        := FALSE;
        DescendantSequenceState := DescendantSequenceState + 10;
    10:
        //Setup Custom modes here

        (*CustomModes(eMode                          :=,
                    sName                          :=,
                    bDisableClearing               :=,
                    bDisableStarting               :=,
                    bDisableSuspended              :=,
                    bDisableStopping               :=,
                    bDisableAborting               :=,
                    bDisableHolding                :=,
                    bDisableHeld                   :=,
                    bDisableUnholding              :=,
                    bDisableSuspending             :=,
                    bDisableUnsuspending           :=,
                    bDisableResetting              :=,
                    bDisableIdle                   :=,
                    bDisableCompleting             :=,
                    bDisableComplete               :=,
                    bEnableUnitModeChangeStopped   :=,
                    bEnableUnitModeChangeIdle      :=,
                    bEnableUnitModeChangeSuspended :=,
                    bEnableUnitModeChangeExecute   :=,
                    bEnableUnitModeChangeAborted   :=,
                    bEnableUnitModeChangeHeld      :=,
                    bEnableUnitModeChangeComplete  :=,
                    bError                         =>,
                    nErrorId                       =>);*)
        DescendantSequenceState := DescendantSequenceState + 10;
    20:
        //Copy Mode names
        FOR i := 1 TO 3 DO
            ModeNames[i] := F_UnitModeToString(UDINT_TO_DINT(i));
        END_FOR

        DescendantSequenceState := DescendantSequenceState + 10;
    30:
        // Initialize Recipes 
        Initialize_Recipes();
        DescendantSequenceState := DescendantSequenceState + 10;
    40:
        //Call the Super
        IF SUPER^.Initialize() THEN
            DescendantSequenceState := DescendantSequenceState + 10;
        END_IF
    50:
        Initialize := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize_Recipes" Id="{ff1cc9e5-6ad1-43f6-8c9d-eef4564b905f}">
      <Declaration><![CDATA[METHOD Initialize_Recipes
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// configuration of parameters Max Speed
_packTags.Command.Parameter[1].ID    := 1;
_packTags.Command.Parameter[1].Name  := 'Max Speed';
_packTags.Command.Parameter[1].Unit  := '/min';
_packTags.Command.Parameter[1].Value := 180;
_packTags.Command.Parameter[2].ID    := 2;
_packTags.Command.Parameter[2].Name  := 'Product to Run';
_packTags.Command.Parameter[2].Unit  := '';
_packTags.Command.Parameter[2].Value := 1;

// Recipe Product 1
_PackTags.Command.Product[1].ProductID                              := 100;
_PackTags.Command.Product[1].Ingredients[1].IngredientID            := 1;
_PackTags.Command.Product[1].Ingredients[1].Parameter[1].ID         := _PackTags.Command.Product[1].ProductID * 10 + 1;
_PackTags.Command.Product[1].Ingredients[1].Parameter[1].Name       := 'Material Type';
_PackTags.Command.Product[1].Ingredients[1].Parameter[1].Unit       := 'n/a';
_PackTags.Command.Product[1].Ingredients[1].Parameter[1].Value      := 5;
_PackTags.Command.Product[1].Ingredients[1].Parameter[2].ID         := _PackTags.Command.Product[1].ProductID * 10 + 2;
_PackTags.Command.Product[1].Ingredients[1].Parameter[2].Name       := 'Material Thickness';
_PackTags.Command.Product[1].Ingredients[1].Parameter[2].Unit       := 'um';
_PackTags.Command.Product[1].Ingredients[1].Parameter[2].Value      := 240;
_PackTags.Command.Product[1].ProcessVariables[LENGTH].ID            := _PackTags.Command.Product[1].ProductID * 20 + 1;
_PackTags.Command.Product[1].ProcessVariables[LENGTH].Name          := 'Length';
_PackTags.Command.Product[1].ProcessVariables[LENGTH].Unit          := 'mm';
_PackTags.Command.Product[1].ProcessVariables[LENGTH].Value         := 100;
_PackTags.Command.Product[1].ProcessVariables[SEALTEMP].ID          := _PackTags.Command.Product[1].ProductID * 20 + 2;
_PackTags.Command.Product[1].ProcessVariables[SEALTEMP].Name        := 'Sealing Temp';
_PackTags.Command.Product[1].ProcessVariables[SEALTEMP].Unit        := 'C';
_PackTags.Command.Product[1].ProcessVariables[SEALTEMP].Value       := 100;
_PackTags.Command.Product[1].ProcessVariables[SEALTIME].ID          := _PackTags.Command.Product[1].ProductID * 20 + 3;
_PackTags.Command.Product[1].ProcessVariables[SEALTIME].Name        := 'Sealing Time';
_PackTags.Command.Product[1].ProcessVariables[SEALTIME].Unit        := 'ms';
_PackTags.Command.Product[1].ProcessVariables[SEALTIME].Value       := 50;
_PackTags.Command.Product[1].ProcessVariables[GANTRY_VEL].ID    := _PackTags.Command.Product[1].ProductID * 20 + 4;
_PackTags.Command.Product[1].ProcessVariables[GANTRY_VEL].Name  := 'Gantry Vel';
_PackTags.Command.Product[1].ProcessVariables[GANTRY_VEL].Unit  := 'mm/s';
_PackTags.Command.Product[1].ProcessVariables[GANTRY_VEL].Value := 100;
_PackTags.Command.Product[1].ProcessVariables[GANTRY_ACC].ID    := _PackTags.Command.Product[1].ProductID * 20 + 5;
_PackTags.Command.Product[1].ProcessVariables[GANTRY_ACC].Name  := 'Gantry Acc';
_PackTags.Command.Product[1].ProcessVariables[GANTRY_ACC].Unit  := 'mm/s2';
_PackTags.Command.Product[1].ProcessVariables[GANTRY_ACC].Value := 1000;
_PackTags.Command.Product[1].ProcessVariables[OPEN_POS].ID          := _PackTags.Command.Product[1].ProductID * 20 + 6;

_PackTags.Command.Product[1].ProcessVariables[OPEN_POS].Unit        := 'mm';
_PackTags.Command.Product[1].ProcessVariables[OPEN_POS].Value       := 105;
_PackTags.Command.Product[1].ProcessVariables[CLOSED_POS].ID        := _PackTags.Command.Product[1].ProductID * 20 + 7;

_PackTags.Command.Product[1].ProcessVariables[CLOSED_POS].Unit      := 'mm';
_PackTags.Command.Product[1].ProcessVariables[CLOSED_POS].Value     := 250;

_PackTags.Command.Product[1].ProcessVariables[UNWIND_VEL].ID        := _PackTags.Command.Product[1].ProductID * 20 + 10;
_PackTags.Command.Product[1].ProcessVariables[UNWIND_VEL].Name      := 'Unwind Vel';
_PackTags.Command.Product[1].ProcessVariables[UNWIND_VEL].Unit      := 'mm/s';
_PackTags.Command.Product[1].ProcessVariables[UNWIND_VEL].Value     := 100;
_PackTags.Command.Product[1].ProcessVariables[UNWIND_ACC].ID        := _PackTags.Command.Product[1].ProductID * 20 + 11;
_PackTags.Command.Product[1].ProcessVariables[UNWIND_ACC].Name      := 'Unwind Acc';
_PackTags.Command.Product[1].ProcessVariables[UNWIND_ACC].Unit      := 'mm/s2';
_PackTags.Command.Product[1].ProcessVariables[UNWIND_ACC].Value     := 1000;

// Product 2
_PackTags.Command.Product[2].ProductID                         := 100;
_PackTags.Command.Product[2].Ingredients[1].IngredientID       := 1;
_PackTags.Command.Product[2].Ingredients[1].Parameter[1].ID    := _PackTags.Command.Product[1].ProductID * 10 + 1;
_PackTags.Command.Product[2].Ingredients[1].Parameter[1].Name  := 'Material Type';
_PackTags.Command.Product[2].Ingredients[1].Parameter[1].Unit  := 'n/a';
_PackTags.Command.Product[2].Ingredients[1].Parameter[1].Value := 2;
_PackTags.Command.Product[2].Ingredients[1].Parameter[2].ID    := _PackTags.Command.Product[1].ProductID * 10 + 2;
_PackTags.Command.Product[2].Ingredients[1].Parameter[2].Name  := 'Material Thickness';
_PackTags.Command.Product[2].Ingredients[1].Parameter[2].Unit  := 'um';
_PackTags.Command.Product[2].Ingredients[1].Parameter[2].Value := 220;
_PackTags.Command.Product[2].ProcessVariables[LENGTH].ID       := _PackTags.Command.Product[1].ProductID * 20 + 1;
_PackTags.Command.Product[2].ProcessVariables[LENGTH].Name     := 'Length';
_PackTags.Command.Product[2].ProcessVariables[LENGTH].Unit     := 'mm';
_PackTags.Command.Product[2].ProcessVariables[LENGTH].Value    := 55;
_PackTags.Command.Product[2].ProcessVariables[SEALTEMP].ID     := _PackTags.Command.Product[1].ProductID * 20 + 2;
_PackTags.Command.Product[2].ProcessVariables[SEALTEMP].Name   := 'Sealing Temp';
_PackTags.Command.Product[2].ProcessVariables[SEALTEMP].Unit   := 'C';
_PackTags.Command.Product[2].ProcessVariables[SEALTEMP].Value  := 110;
_PackTags.Command.Product[2].ProcessVariables[SEALTIME].ID     := _PackTags.Command.Product[1].ProductID * 20 + 3;
_PackTags.Command.Product[2].ProcessVariables[SEALTIME].Name   := 'Sealing Time';
_PackTags.Command.Product[2].ProcessVariables[SEALTIME].Unit   := 'ms';
_PackTags.Command.Product[2].ProcessVariables[SEALTIME].Value  := 100;
_PackTags.Command.Product[2].ProcessVariables[GANTRY_VEL].ID    := _PackTags.Command.Product[1].ProductID * 20 + 4;
_PackTags.Command.Product[2].ProcessVariables[GANTRY_VEL].Name  := 'Gantry Vel';
_PackTags.Command.Product[2].ProcessVariables[GANTRY_VEL].Unit  := 'mm/s';
_PackTags.Command.Product[2].ProcessVariables[GANTRY_VEL].Value := 200;
_PackTags.Command.Product[2].ProcessVariables[GANTRY_ACC].ID    := _PackTags.Command.Product[1].ProductID * 20 + 5;
_PackTags.Command.Product[2].ProcessVariables[GANTRY_ACC].Name  := 'Gantry Acc';
_PackTags.Command.Product[2].ProcessVariables[GANTRY_ACC].Unit  := 'mm/s2';
_PackTags.Command.Product[2].ProcessVariables[GANTRY_ACC].Value := 2000;
_PackTags.Command.Product[2].ProcessVariables[OPEN_POS].ID          := _PackTags.Command.Product[1].ProductID * 20 + 6;

_PackTags.Command.Product[2].ProcessVariables[OPEN_POS].Unit        := 'mm';
_PackTags.Command.Product[2].ProcessVariables[OPEN_POS].Value       := 60;
_PackTags.Command.Product[2].ProcessVariables[CLOSED_POS].ID        := _PackTags.Command.Product[1].ProductID * 20 + 7;

_PackTags.Command.Product[2].ProcessVariables[CLOSED_POS].Unit      := 'mm';
_PackTags.Command.Product[2].ProcessVariables[CLOSED_POS].Value     := 253;
_PackTags.Command.Product[2].ProcessVariables[UNWIND_VEL].ID        := _PackTags.Command.Product[1].ProductID * 20 + 10;
_PackTags.Command.Product[2].ProcessVariables[UNWIND_VEL].Name      := 'Unwind Vel';
_PackTags.Command.Product[2].ProcessVariables[UNWIND_VEL].Unit      := 'mm/s';
_PackTags.Command.Product[2].ProcessVariables[UNWIND_VEL].Value     := 200;
_PackTags.Command.Product[2].ProcessVariables[UNWIND_ACC].ID        := _PackTags.Command.Product[1].ProductID * 20 + 11;
_PackTags.Command.Product[2].ProcessVariables[UNWIND_ACC].Name      := 'Unwind Acc';
_PackTags.Command.Product[2].ProcessVariables[UNWIND_ACC].Unit      := 'mm/s2';
_PackTags.Command.Product[2].ProcessVariables[UNWIND_ACC].Value     := 2000;

//Product 3
_PackTags.Command.Product[3].ProductID                         := 307;
_PackTags.Command.Product[3].Ingredients[1].IngredientID       := 1;
_PackTags.Command.Product[3].Ingredients[1].Parameter[1].ID    := _PackTags.Command.Product[1].ProductID * 10 + 1;
_PackTags.Command.Product[3].Ingredients[1].Parameter[1].Name  := 'Material Type';
_PackTags.Command.Product[3].Ingredients[1].Parameter[1].Unit  := 'n/a';
_PackTags.Command.Product[3].Ingredients[1].Parameter[1].Value := 2;
_PackTags.Command.Product[3].Ingredients[1].Parameter[2].ID    := _PackTags.Command.Product[1].ProductID * 10 + 2;
_PackTags.Command.Product[3].Ingredients[1].Parameter[2].Name  := 'Material Thickness';
_PackTags.Command.Product[3].Ingredients[1].Parameter[2].Unit  := 'um';
_PackTags.Command.Product[3].Ingredients[1].Parameter[2].Value := 220;
_PackTags.Command.Product[3].ProcessVariables[LENGTH].ID       := _PackTags.Command.Product[1].ProductID * 20 + 1;
_PackTags.Command.Product[3].ProcessVariables[LENGTH].Name     := 'Length';
_PackTags.Command.Product[3].ProcessVariables[LENGTH].Unit     := 'mm';
_PackTags.Command.Product[3].ProcessVariables[LENGTH].Value    := 85;
_PackTags.Command.Product[3].ProcessVariables[GANTRY_VEL].ID    := _PackTags.Command.Product[1].ProductID * 20 + 4;
_PackTags.Command.Product[3].ProcessVariables[GANTRY_VEL].Name  := 'Gantry Vel';
_PackTags.Command.Product[3].ProcessVariables[GANTRY_VEL].Unit  := 'mm/s';
_PackTags.Command.Product[3].ProcessVariables[GANTRY_VEL].Value := 300;
_PackTags.Command.Product[3].ProcessVariables[GANTRY_ACC].ID    := _PackTags.Command.Product[1].ProductID * 20 + 5;
_PackTags.Command.Product[3].ProcessVariables[GANTRY_ACC].Name  := 'Gantry Acc';
_PackTags.Command.Product[3].ProcessVariables[GANTRY_ACC].Unit  := 'mm/s2';
_PackTags.Command.Product[3].ProcessVariables[GANTRY_ACC].Value := 3000;
_PackTags.Command.Product[3].ProcessVariables[OPEN_POS].ID          := _PackTags.Command.Product[1].ProductID * 20 + 6;

_PackTags.Command.Product[3].ProcessVariables[OPEN_POS].Unit        := 'mm';
_PackTags.Command.Product[3].ProcessVariables[OPEN_POS].Value       := 56;
_PackTags.Command.Product[3].ProcessVariables[CLOSED_POS].ID        := _PackTags.Command.Product[1].ProductID * 20 + 7;

_PackTags.Command.Product[3].ProcessVariables[CLOSED_POS].Unit      := 'mm';
_PackTags.Command.Product[3].ProcessVariables[CLOSED_POS].Value     := 265;

_PackTags.Command.Product[3].ProcessVariables[UNWIND_VEL].ID        := _PackTags.Command.Product[1].ProductID * 20 + 10;
_PackTags.Command.Product[3].ProcessVariables[UNWIND_VEL].Name      := 'Unwind Vel';
_PackTags.Command.Product[3].ProcessVariables[UNWIND_VEL].Unit      := 'mm/s';
_PackTags.Command.Product[3].ProcessVariables[UNWIND_VEL].Value     := 300;
_PackTags.Command.Product[3].ProcessVariables[UNWIND_ACC].ID        := _PackTags.Command.Product[1].ProductID * 20 + 11;
_PackTags.Command.Product[3].ProcessVariables[UNWIND_ACC].Name      := 'Unwind Acc';
_PackTags.Command.Product[3].ProcessVariables[UNWIND_ACC].Unit      := 'mm/s2';
_PackTags.Command.Product[3].ProcessVariables[UNWIND_ACC].Value     := 3000;

//Product 4
_PackTags.Command.Product[4].ProductID                         := 401;
_PackTags.Command.Product[4].Ingredients[1].IngredientID       := 1;
_PackTags.Command.Product[4].Ingredients[1].Parameter[1].ID    := _PackTags.Command.Product[1].ProductID * 10 + 1;
_PackTags.Command.Product[4].Ingredients[1].Parameter[1].Name  := 'Material Type';
_PackTags.Command.Product[4].Ingredients[1].Parameter[1].Unit  := 'n/a';
_PackTags.Command.Product[4].Ingredients[1].Parameter[1].Value := 2;
_PackTags.Command.Product[4].Ingredients[1].Parameter[2].ID    := _PackTags.Command.Product[1].ProductID * 10 + 2;
_PackTags.Command.Product[4].Ingredients[1].Parameter[2].Name  := 'Material Thickness';
_PackTags.Command.Product[4].Ingredients[1].Parameter[2].Unit  := 'um';
_PackTags.Command.Product[4].Ingredients[1].Parameter[2].Value := 220;
_PackTags.Command.Product[4].ProcessVariables[LENGTH].ID       := _PackTags.Command.Product[1].ProductID * 20 + 1;
_PackTags.Command.Product[4].ProcessVariables[LENGTH].Name     := 'Length';
_PackTags.Command.Product[4].ProcessVariables[LENGTH].Unit     := 'mm';
_PackTags.Command.Product[4].ProcessVariables[LENGTH].Value    := 85;
_PackTags.Command.Product[4].ProcessVariables[SEALTEMP].ID     := _PackTags.Command.Product[1].ProductID * 20 + 2;
_PackTags.Command.Product[4].ProcessVariables[SEALTEMP].Name   := 'Sealing Temp';
_PackTags.Command.Product[4].ProcessVariables[SEALTEMP].Unit   := 'C';
_PackTags.Command.Product[4].ProcessVariables[SEALTEMP].Value  := 95;
_PackTags.Command.Product[4].ProcessVariables[SEALTIME].ID     := _PackTags.Command.Product[1].ProductID * 20 + 3;
_PackTags.Command.Product[4].ProcessVariables[SEALTIME].Name   := 'Sealing Time';
_PackTags.Command.Product[4].ProcessVariables[SEALTIME].Unit   := 'ms';
_PackTags.Command.Product[4].ProcessVariables[SEALTIME].Value  := 80;
_PackTags.Command.Product[4].ProcessVariables[GANTRY_VEL].ID    := _PackTags.Command.Product[1].ProductID * 20 + 4;
_PackTags.Command.Product[4].ProcessVariables[GANTRY_VEL].Name  := 'Gantry Vel';
_PackTags.Command.Product[4].ProcessVariables[GANTRY_VEL].Unit  := 'mm/s';
_PackTags.Command.Product[4].ProcessVariables[GANTRY_VEL].Value := 100;
_PackTags.Command.Product[4].ProcessVariables[GANTRY_ACC].ID    := _PackTags.Command.Product[1].ProductID * 20 + 5;
_PackTags.Command.Product[4].ProcessVariables[GANTRY_ACC].Name  := 'Gantry Acc';
_PackTags.Command.Product[4].ProcessVariables[GANTRY_ACC].Unit  := 'mm/s2';
_PackTags.Command.Product[4].ProcessVariables[GANTRY_ACC].Value := 1000;
_PackTags.Command.Product[4].ProcessVariables[OPEN_POS].ID          := _PackTags.Command.Product[1].ProductID * 20 + 6;

_PackTags.Command.Product[4].ProcessVariables[OPEN_POS].Unit        := 'mm';
_PackTags.Command.Product[4].ProcessVariables[OPEN_POS].Value       := 105;
_PackTags.Command.Product[4].ProcessVariables[CLOSED_POS].ID        := _PackTags.Command.Product[1].ProductID * 20 + 7;

_PackTags.Command.Product[4].ProcessVariables[CLOSED_POS].Unit      := 'mm';
_PackTags.Command.Product[4].ProcessVariables[CLOSED_POS].Value     := 250;
_PackTags.Command.Product[4].ProcessVariables[UNWIND_VEL].ID        := _PackTags.Command.Product[1].ProductID * 20 + 10;
_PackTags.Command.Product[4].ProcessVariables[UNWIND_VEL].Name      := 'Unwind Vel';
_PackTags.Command.Product[4].ProcessVariables[UNWIND_VEL].Unit      := 'mm/s';
_PackTags.Command.Product[4].ProcessVariables[UNWIND_VEL].Value     := 100;
_PackTags.Command.Product[4].ProcessVariables[UNWIND_ACC].ID        := _PackTags.Command.Product[1].ProductID * 20 + 11;
_PackTags.Command.Product[4].ProcessVariables[UNWIND_ACC].Name      := 'Unwind Acc';
_PackTags.Command.Product[4].ProcessVariables[UNWIND_ACC].Unit      := 'mm/s2';
_PackTags.Command.Product[4].ProcessVariables[UNWIND_ACC].Value     := 1000;

//Product 5
_PackTags.Command.Product[5].ProductID                         := 522;
_PackTags.Command.Product[5].Ingredients[1].IngredientID       := 1;
_PackTags.Command.Product[5].Ingredients[1].Parameter[1].ID    := _PackTags.Command.Product[1].ProductID * 10 + 1;
_PackTags.Command.Product[5].Ingredients[1].Parameter[1].Name  := 'Material Type';
_PackTags.Command.Product[5].Ingredients[1].Parameter[1].Unit  := 'n/a';
_PackTags.Command.Product[5].Ingredients[1].Parameter[1].Value := 2;
_PackTags.Command.Product[5].Ingredients[1].Parameter[2].ID    := _PackTags.Command.Product[1].ProductID * 10 + 2;
_PackTags.Command.Product[5].Ingredients[1].Parameter[2].Name  := 'Material Thickness';
_PackTags.Command.Product[5].Ingredients[1].Parameter[2].Unit  := 'um';
_PackTags.Command.Product[5].Ingredients[1].Parameter[2].Value := 520;
_PackTags.Command.Product[5].ProcessVariables[LENGTH].ID       := _PackTags.Command.Product[1].ProductID * 20 + 1;
_PackTags.Command.Product[5].ProcessVariables[LENGTH].Name     := 'Length';
_PackTags.Command.Product[5].ProcessVariables[LENGTH].Unit     := 'mm';
_PackTags.Command.Product[5].ProcessVariables[LENGTH].Value    := 200;
_PackTags.Command.Product[5].ProcessVariables[SEALTEMP].ID     := _PackTags.Command.Product[1].ProductID * 20 + 2;
_PackTags.Command.Product[5].ProcessVariables[SEALTEMP].Name   := 'Sealing Temp';
_PackTags.Command.Product[5].ProcessVariables[SEALTEMP].Unit   := 'C';
_PackTags.Command.Product[5].ProcessVariables[SEALTEMP].Value  := 130;
_PackTags.Command.Product[5].ProcessVariables[SEALTIME].ID     := _PackTags.Command.Product[1].ProductID * 20 + 3;
_PackTags.Command.Product[5].ProcessVariables[SEALTIME].Name   := 'Sealing Time';
_PackTags.Command.Product[5].ProcessVariables[SEALTIME].Unit   := 'ms';
_PackTags.Command.Product[5].ProcessVariables[SEALTIME].Value  := 200;
_PackTags.Command.Product[5].ProcessVariables[GANTRY_VEL].ID    := _PackTags.Command.Product[1].ProductID * 20 + 4;
_PackTags.Command.Product[5].ProcessVariables[GANTRY_VEL].Name  := 'Gantry Vel';
_PackTags.Command.Product[5].ProcessVariables[GANTRY_VEL].Unit  := 'mm/s';
_PackTags.Command.Product[5].ProcessVariables[GANTRY_VEL].Value := 100;
_PackTags.Command.Product[5].ProcessVariables[GANTRY_ACC].ID    := _PackTags.Command.Product[1].ProductID * 20 + 5;
_PackTags.Command.Product[5].ProcessVariables[GANTRY_ACC].Name  := 'Gantry Acc';
_PackTags.Command.Product[5].ProcessVariables[GANTRY_ACC].Unit  := 'mm/s2';
_PackTags.Command.Product[5].ProcessVariables[GANTRY_ACC].Value := 1000;
_PackTags.Command.Product[5].ProcessVariables[OPEN_POS].ID          := _PackTags.Command.Product[1].ProductID * 20 + 6;

_PackTags.Command.Product[5].ProcessVariables[OPEN_POS].Unit        := 'mm';
_PackTags.Command.Product[5].ProcessVariables[OPEN_POS].Value       := 105;
_PackTags.Command.Product[5].ProcessVariables[CLOSED_POS].ID        := _PackTags.Command.Product[1].ProductID * 20 + 7;

_PackTags.Command.Product[5].ProcessVariables[CLOSED_POS].Unit      := 'mm';
_PackTags.Command.Product[5].ProcessVariables[CLOSED_POS].Value     := 250;
_PackTags.Command.Product[5].ProcessVariables[UNWIND_VEL].ID        := _PackTags.Command.Product[1].ProductID * 20 + 10;
_PackTags.Command.Product[5].ProcessVariables[UNWIND_VEL].Name      := 'Unwind Vel';
_PackTags.Command.Product[5].ProcessVariables[UNWIND_VEL].Unit      := 'mm/s';
_PackTags.Command.Product[5].ProcessVariables[UNWIND_VEL].Value     := 100;
_PackTags.Command.Product[5].ProcessVariables[UNWIND_ACC].ID        := _PackTags.Command.Product[1].ProductID * 20 + 11;
_PackTags.Command.Product[5].ProcessVariables[UNWIND_ACC].Name      := 'Unwind Acc';
_PackTags.Command.Product[5].ProcessVariables[UNWIND_ACC].Unit      := 'mm/s2';
_PackTags.Command.Product[5].ProcessVariables[UNWIND_ACC].Value     := 1000;


CurrentRecipeName := 'From PackTags';]]></ST>
      </Implementation>
    </Method>
    <Property Name="PackTags" Id="{9aa9f3a3-b6cb-4acf-9b63-fe5316f02b44}">
      <Declaration><![CDATA[PROPERTY PUBLIC PackTags : ST_PackMLv30Ext]]></Declaration>
      <Get Name="Get" Id="{51ed710f-755c-4ab3-a3bb-482bbf3e96b4}">
        <Declaration><![CDATA[VAR
END_VAR]]></Declaration>
        <Implementation>
          <ST><![CDATA[PackTags := _packTags;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="RaiseAlarm2Args" Id="{45171f7d-6922-46eb-a058-ee14fb1eff75}">
      <Declaration><![CDATA[METHOD RaiseAlarm2Args
VAR_IN_OUT
    Alarm : FB_TcAlarm; //Alarm to be raised
END_VAR

VAR_INPUT
    String_1 : STRING; //First String Parameter (The Name of this component will be applied first automatically)
    String_2 : STRING; //Second String Parameter
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[F_RaiseAlarmWithStringParameters(Alarm    := Alarm,
                                 String_1 := Name,
                                 String_2 := String_1,
                                 String_3 := String_2);]]></ST>
      </Implementation>
    </Method>
    <Method Name="SubModuleMonitor" Id="{dcbc78eb-4598-4276-aefb-1642881bb3aa}">
      <Declaration><![CDATA[METHOD PROTECTED SubModuleMonitor : BOOL
VAR
    AlarmResponses : ARRAY[0..4] OF E_AlarmResponse; //Temporary response array	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Check the sub Modules for Alarm Severity
SUPER^.SubModuleMonitor();

//Check the alarms at the machine level
_CurrentAlarmSeverity := F_GetMaxSeverityRaised(Alarms := MachineAlarms, CurrentSeverity := _CurrentAlarmSeverity);

//Check the severity of the machine level alarms
IF _CurrentState <> E_PMLState.ePMLState_Aborted AND _CurrentState <> E_PMLState.ePMLState_Aborting AND _CurrentState <> E_PMLState.ePMLState_Clearing AND
   _CurrentState <> E_PMLState.ePMLState_Stopped AND _CurrentState <> E_PMLState.ePMLState_Stopping THEN
    AlarmResponses := _ParentFaultResponseDefinitions;
    CASE AlarmResponses[CurrentAlarmSeverity] OF
        E_AlarmResponse.Abort_ImmediateError:
            AbortImmediateError(Name, TRUE);
        E_AlarmResponse.Abort_Immediate:
            AbortImmediate();
        E_AlarmResponse.Stop_Immediate:
            StopImmediate();
        E_AlarmResponse.Stop_Controlled:
            StopControlled();
        E_AlarmResponse.Hold_Immediate:
            HoldImmediate();
        E_AlarmResponse.Suspend_Immediate:
            SuspendImmediate();
        E_AlarmResponse.Suspend_Controlled:
            SuspendControlled();
        E_AlarmResponse.NoResponse:
            ;
    END_CASE
ELSIF _CurrentState = E_PMLState.ePMLState_Stopped OR _CurrentState = E_PMLState.ePMLState_Stopping THEN
    AlarmResponses := _ParentFaultResponseDefinitions;
    CASE AlarmResponses[CurrentAlarmSeverity] OF
        E_AlarmResponse.Abort_ImmediateError:
            AbortImmediateError(Name, TRUE);
        E_AlarmResponse.Abort_Immediate:
            AbortImmediate();
        E_AlarmResponse.NoResponse:
            ;
    END_CASE
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateModeTimers" Id="{7cb1f824-a369-47d2-b77a-03aae7321075}">
      <Declaration><![CDATA[METHOD UpdateModeTimers
VAR
    currentTime  : T_DCTIME64;
    timeToUpdate : LREAL;
END_VAR

VAR_INST
    lastTime  : T_DCTIME64 := F_GetActualDcTime64();
    lastState : DINT;
    lastMode  : DINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _PackTags.Status.StateCurrent <> lastState THEN
    MEMSET(ADR(_PackTags.Admin.StateCurrentTime), 0, SIZEOF(_PackTags.Admin.StateCurrentTime));
    lastState := _PackTags.Status.StateCurrent;
END_IF

IF _PackTags.Status.UnitModeCurrent <> lastMode THEN
    MEMSET(ADR(_PackTags.Admin.ModeCurrentTime), 0, SIZEOF(_PackTags.Admin.ModeCurrentTime));
    lastMode := _PackTags.Status.UnitModeCurrent;
END_IF

currentTime := F_GetActualDcTime64();
IF lastTime <> 0 THEN
    timeToUpdate := ULINT_TO_LREAL(currentTime - lastTime) / 1_000_000_000.0;
END_IF

// only seconds get added to the cumulative timers 
IF timeToUpdate > 1 THEN
    _PackTags.Admin.ModeCummulativeTime[_PackTags.Status.UnitModeCurrent] := _PackTags.Admin.ModeCummulativeTime[_PackTags.Status.UnitModeCurrent] + LREAL_TO_DINT(timeToUpdate);
    _PackTags.Admin.ModeCurrentTime[_PackTags.Status.UnitModeCurrent]     := _PackTags.Admin.ModeCurrentTime[_PackTags.Status.UnitModeCurrent] + LREAL_TO_DINT(timeToUpdate);
    _PackTags.Admin.StateCummulativeTime[_PackTags.Status.UnitModeCurrent, _PackTags.Status.StateCurrent]
        := _PackTags.Admin.StateCummulativeTime[_PackTags.Status.UnitModeCurrent, _PackTags.Status.StateCurrent] + LREAL_TO_DINT(timeToUpdate);

    _PackTags.Admin.StateCurrentTime[_PackTags.Status.UnitModeCurrent, _PackTags.Status.StateCurrent] :=
        _PackTags.Admin.StateCurrentTime[_PackTags.Status.UnitModeCurrent, _PackTags.Status.StateCurrent] + LREAL_TO_DINT(timeToUpdate);

    lastTime := currentTime;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>