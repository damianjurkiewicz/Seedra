<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_GantryXY" Id="{496b17f1-4b0a-4954-89f4-eec9ef72b2f5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_GantryXY EXTENDS FB_PackML_BaseModule
VAR
    // Sub module definitions here

    // List of sub modules
    ipSubModules_Init : ARRAY[1..Parameters_PackML_Base.MAX_NO_OF_SUBMODULES] OF I_PackML_BaseModule := [];

    // Component definitions here
    GantryAxisX       : FB_Component_BasicSlaveAxis := (Name := 'Left');
    GantryAxisY    	  : FB_Component_BasicSlaveAxis := (Name := 'Right');
    GantryCylinder    : FB_GantryXYCylinder                 := (Name := 'Cylinder');

    //Alarms for this module
    GantryAlarms : ARRAY[1..GANTRY_ALARM_COUNT] OF FB_TcAlarm;

	//Data for recipe
	Recipe : ST_GantryXY;
    (*Parameters from PackTags for module
    _Param  : ARRAY[1..10] OF ST_Descriptor2;*)
    _Report : ARRAY[1..10] OF ST_Descriptor2;

    //HMI Control for EM
    fbControlSourceHMI : FB_ControlSource_HMI;
END_VAR

VAR CONSTANT

    //reports 
    FAULT : INT := 1;

    //Alarms
    GANTRY_ALARM_COUNT : INT := 5;
END_VAR

//Simulation variables for messaging
VAR
    ErrorInput : BOOL;
    WarnInput  : BOOL;
    InfoInput  : BOOL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="Acceleration" Id="{fb737272-8121-443f-bb81-17cc6deb00e3}">
      <Declaration><![CDATA[PROPERTY Acceleration : LREAL]]></Declaration>
      <Set Name="Set" Id="{a82221d7-d213-426a-9fb3-1813ff8529dc}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Recipe.LeftAxis.Acceleration := Acceleration;
Recipe.RightAxis.Acceleration := Acceleration;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="CreateEvents" Id="{4ec0ace2-c308-44b2-84a1-60ba649bd547}">
      <Declaration><![CDATA[METHOD PROTECTED CreateEvents
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Add your event creation here
F_CreateAllEventsInClass(Alarms     := GantryAlarms,
                         ClassSize  := SIZEOF(TC_EVENTS.Gantry),
                         pInitEvent := ADR(TC_EVENTS.Gantry.InitReferenceEvent),
                         Prefix     := _Name);

// Super call to base
SUPER^.CreateEvents();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic" Id="{02def406-fced-425b-89cd-43b7d8052b02}">
      <Declaration><![CDATA[METHOD CyclicLogic
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _InitComplete THEN
    _InitComplete := Initialize();
    RETURN;
END_IF

SUPER^.CyclicLogic();

//HMI control for EM
fbControlSourceHMI.CyclicLogic();

//Set the current alarm severity for this module
_CurrentAlarmSeverity := F_GetMaxSeverityRaised(Alarms := GantryAlarms, CurrentSeverity := _CurrentAlarmSeverity);

//Simulate Alarm Messaging
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{b4a0fd62-4385-4420-ae43-9bea35a3f798}">
      <Declaration><![CDATA[//! @summary Basic module initialization logic
METHOD PROTECTED Initialize : BOOL;
VAR
    i                        : UDINT;
    varInfo                  : __SYSTEM.VAR_INFO;
    AllSubUnitsInitialized   : BOOL := TRUE;
    AllComponentsInitialized : BOOL := TRUE;
END_VAR

//! @description This method is called by <c>CyclicLogic()</c> as required]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
    0:
		RegisterComponent(GantryAxisX);
		RegisterComponent(GantryAxisY);		
		RegisterComponent(GantryCylinder);
		
        _LogModeChanges         := FALSE;
        _LogStateChanges        := FALSE;
        DescendantSequenceState := DescendantSequenceState + 10;
    10:
        //Setup Custom modes here

        (*CustomModes(eMode                          :=,
                    sName                          :=,
                    bDisableClearing               :=,
                    bDisableStarting               :=,
                    bDisableSuspended              :=,
                    bDisableStopping               :=,
                    bDisableAborting               :=,
                    bDisableHolding                :=,
                    bDisableHeld                   :=,
                    bDisableUnholding              :=,
                    bDisableSuspending             :=,
                    bDisableUnsuspending           :=,
                    bDisableResetting              :=,
                    bDisableIdle                   :=,
                    bDisableCompleting             :=,
                    bDisableComplete               :=,
                    bEnableUnitModeChangeStopped   :=,
                    bEnableUnitModeChangeIdle      :=,
                    bEnableUnitModeChangeSuspended :=,
                    bEnableUnitModeChangeExecute   :=,
                    bEnableUnitModeChangeAborted   :=,
                    bEnableUnitModeChangeHeld      :=,
                    bEnableUnitModeChangeComplete  :=,
                    bError                         =>,
                    nErrorId                       =>);*)
        DescendantSequenceState := DescendantSequenceState + 10;
    20:
        //Copy Mode names
        FOR i := 1 TO 3 DO
            ModeNames[i] := F_UnitModeToString(UDINT_TO_DINT(i));
        END_FOR

        Initialize_TagData();
		RegisterExternalController(Controller := fbControlSourceHMI);
		fbControlSourceHMI.CyclicLogic();
        DescendantSequenceState := DescendantSequenceState + 10;
    30:
        //Call the Super
        IF SUPER^.Initialize() THEN
            DescendantSequenceState := DescendantSequenceState + 10;
        END_IF
    40:
        Initialize := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize_TagData" Id="{32a2e019-abce-425f-8e3c-cc5fca6b6f69}">
      <Declaration><![CDATA[METHOD Initialize_TagData
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Reports
_Report[FAULT].ID    := TO_DINT(1 * 10 + 1);
_Report[FAULT].Name  := 'Fault ID';
_Report[FAULT].Unit  := 'n/a';

//Recipe
Recipe.Length := 100;
Recipe.LeftAxis.Velocity := 100;
Recipe.LeftAxis.Acceleration := 1000;
Recipe.RightAxis.Velocity := 100;
Recipe.RightAxis.Acceleration := 1000;
]]></ST>
      </Implementation>
    </Method>
    <Property Name="Length" Id="{25f83960-2850-4c98-aac0-0474e792dc9b}">
      <Declaration><![CDATA[PROPERTY Length : LREAL]]></Declaration>
      <Get Name="Get" Id="{49a64ec1-b283-4c39-b495-d337d077c39a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Length := Recipe.Length;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{62003e52-0dea-4a17-a8a3-a51e509c6ad2}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Recipe.Length := Length;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="RaiseAlarm2Args" Id="{3b444795-a02f-4331-ab15-8dec5e002fb2}">
      <Declaration><![CDATA[METHOD RaiseAlarm2Args
VAR_IN_OUT
    Alarm : FB_TcAlarm; //Alarm to be raised
END_VAR

VAR_INPUT
    String_1 : STRING; //First String Parameter (The Name of this component will be applied first automatically)
    String_2 : STRING; //Second String Parameter
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[F_RaiseAlarmWithStringParameters(Alarm    := Alarm,
                                 String_1 := Name,
                                 String_2 := String_1,
                                 String_3 := String_2);]]></ST>
      </Implementation>
    </Method>
    <Property Name="Velocity" Id="{95139607-01c7-400b-9b34-9fbd90d24f62}">
      <Declaration><![CDATA[PROPERTY Velocity : LREAL]]></Declaration>
      <Set Name="Set" Id="{e26bea52-2635-4098-a40e-4dd141afac28}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[Recipe.LeftAxis.Velocity := Velocity;
Recipe.RightAxis.Velocity := Velocity;]]></ST>
        </Implementation>
      </Set>
    </Property>
  </POU>
</TcPlcObject>