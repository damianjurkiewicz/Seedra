<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_GantryXY" Id="{496b17f1-4b0a-4954-89f4-eec9ef72b2f5}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FB_GantryXY EXTENDS FB_PackML_BaseModule
VAR
    // Sub module definitions here

    // List of sub modules
    ipSubModules_Init : ARRAY[1..Parameters_PackML_Base.MAX_NO_OF_SUBMODULES] OF I_PackML_BaseModule := [];

    // Component definitions here
    GantryAxisX       : FB_Component_BasicSlaveAxis := (Name := 'Left');
    GantryAxisY    	  : FB_Component_BasicSlaveAxis := (Name := 'Right');
    GantryCylinder    : FB_GantryXYCylinder         := (Name := 'Cylinder');

    //Alarms for this module
    GantryAlarms : ARRAY[1..GANTRY_ALARM_COUNT] OF FB_TcAlarm;

	//IO
	PositionSensorX :BOOL;
	PositionSensorY :BOOL;
END_VAR

VAR CONSTANT
    //Alarms
    GANTRY_ALARM_COUNT : INT := 5;
END_VAR

]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Folder Name="GantryXYStates" Id="{83d122fa-7c6a-0e7c-1bbf-3cae8b533243}" />
    <Method Name="Aborted" Id="{7a5dcb3e-2759-094f-1862-434dd6d18864}" FolderPath="GantryXYStates\">
      <Declaration><![CDATA[//! @summary This method contains code which will execute when this PackML module is in the <b>Aborted</b> state
METHOD PROTECTED Aborted

(*! <description> <b>The base implementation of this method is empty. User must override this method to provide functionality.</b>
<table> 
	<tr>
		<th> Previous State </th>
		<th> Transition In </th>
		<th> Transition Out </th>
		<th> Next State  </th> 
	</tr>
	<tr>
		<td> Aborting </td>
		<td> State Complete <i>(Aborting)</i></td> 
		<td> Clear Command </td>
		<td> Clearing </td> 
	</tr>
</table>
This method is called as required by <c>StateControl()</c>
</description> 

*)]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="CreateEvents" Id="{4ec0ace2-c308-44b2-84a1-60ba649bd547}">
      <Declaration><![CDATA[METHOD PROTECTED CreateEvents
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Add your event creation here
F_CreateAllEventsInClass(Alarms     := GantryAlarms,
                         ClassSize  := SIZEOF(TC_EVENTS.Gantry),
                         pInitEvent := ADR(TC_EVENTS.Gantry.InitReferenceEvent),
                         Prefix     := _Name);

// Super call to base
SUPER^.CreateEvents();]]></ST>
      </Implementation>
    </Method>
    <Method Name="CyclicLogic" Id="{02def406-fced-425b-89cd-43b7d8052b02}">
      <Declaration><![CDATA[METHOD CyclicLogic
VAR_INPUT
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _InitComplete THEN
    _InitComplete := Initialize();
    RETURN;
END_IF

SUPER^.CyclicLogic();

//Set the current alarm severity for this module
_CurrentAlarmSeverity := F_GetMaxSeverityRaised(Alarms := GantryAlarms, CurrentSeverity := _CurrentAlarmSeverity);

//Simulate Alarm Messaging
]]></ST>
      </Implementation>
    </Method>
    <Method Name="Execute" Id="{8bbd73eb-f81f-0125-146b-eb6c70f49230}" FolderPath="GantryXYStates\">
      <Declaration><![CDATA[//! @summary This method contains code which will execute when this PackML module is in the <b>Execute</b> state
METHOD PROTECTED Execute

(*! <description> <b>The base implementation of this method is empty. User must override this method to provide functionality.</b>
<table> 
	<tr>
		<th> Previous State </th>
		<th> Transition In </th>
		<th> Transition Out </th>
		<th> Next State  </th> 
	</tr>
	<tr>
		<td> Starting<b>-or-</b>Unholding <b>-or-</b>Unsuspending</td>
		<td> State Complete<i>(Starting<b>-or-</b>Unholding<b>-or-</b>Unsuspending)</i></td> 
		<td> State Complete<b>-or-</b>Hold Command<b>-or-</b>Suspend Command</td>
		<td> Completing<b>-or-</b>Holding<b>-or-</b>Suspending</td>
	</tr>
</table>
This method is called as required by <c>StateControl()</c>
</description> 

*)]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Idle" Id="{0745b186-03c9-09b7-0039-cfbaac37c0d8}" FolderPath="GantryXYStates\">
      <Declaration><![CDATA[//! @summary This method contains code which will execute when this PackML module is in the <b>Idle</b> state
METHOD PROTECTED Idle

(*! <description> <b>The base implementation of this method is empty. User must override this method to provide functionality.</b>
<table> 
	<tr>
		<th> Previous State </th>
		<th> Transition In </th>
		<th> Transition Out </th>
		<th> Next State  </th> 
	</tr>
	<tr>
		<td> Resetting </td>
		<td> State Complete <i>(Resetting)</i></td> 
		<td> Start Command </td>
		<td> Starting </td> 
	</tr>
</table>
This method is called as required by <c>StateControl()</c>
</description> 

*)]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <Method Name="Initialize" Id="{b4a0fd62-4385-4420-ae43-9bea35a3f798}">
      <Declaration><![CDATA[//! @summary Basic module initialization logic
METHOD PROTECTED Initialize : BOOL;
VAR
    i                        : UDINT;
    varInfo                  : __SYSTEM.VAR_INFO;
    AllSubUnitsInitialized   : BOOL := TRUE;
    AllComponentsInitialized : BOOL := TRUE;
END_VAR

//! @description This method is called by <c>CyclicLogic()</c> as required]]></Declaration>
      <Implementation>
        <ST><![CDATA[Initialize := FALSE;
CASE DescendantSequenceState OF
    0:
		RegisterComponent(GantryAxisX);
		RegisterComponent(GantryAxisY);		
		RegisterComponent(GantryCylinder);
		
        _LogModeChanges         := FALSE;
        _LogStateChanges        := FALSE;
        DescendantSequenceState := DescendantSequenceState + 10;
    10:
        DescendantSequenceState := DescendantSequenceState + 10;
    20:
        //Copy Mode names
        FOR i := 1 TO 3 DO
            ModeNames[i] := F_UnitModeToString(UDINT_TO_DINT(i));
        END_FOR

        DescendantSequenceState := DescendantSequenceState + 10;
    30:
        //Call the Super
        IF SUPER^.Initialize() THEN
            DescendantSequenceState := DescendantSequenceState + 10;
        END_IF
    40:
        Initialize := TRUE;
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="Starting" Id="{07b37d87-d0a5-0278-3737-1fd808e976a5}" FolderPath="GantryXYStates\">
      <Declaration><![CDATA[//! @summary This method contains code which will execute when this PackML module is in the <b>Starting</b> state
METHOD PROTECTED Starting
VAR
	i				: UDINT;
	SubModulesReady : BOOL := TRUE;
END_VAR

(*! <description><b></b><table> 
	<tr>
		<th> Previous State </th>
		<th> Transition In </th>
		<th> Transition Out </th>
		<th> Next State  </th> 
	</tr>
	<tr>
		<td> Idle </td>
		<td> Start Command </td> 
		<td> State Complete </td>
		<td> Execute </td> 
	</tr>
</table>
This method is called as required by <c>StateControl()</c>
</description> 

*)]]></Declaration>
      <Implementation>
        <ST><![CDATA[//homing here]]></ST>
      </Implementation>
    </Method>
    <Method Name="Stopped" Id="{4651aaa0-3084-0692-39f1-f4fedfe67bb4}" FolderPath="GantryXYStates\">
      <Declaration><![CDATA[//! @summary This method contains code which will execute when this PackML module is in the <b>Stopped</b> state
METHOD PROTECTED Stopped

(*! <description> <b>The base implementation of this method is empty. User must override this method to provide functionality.</b>
<table> 
	<tr>
		<th> Previous State </th>
		<th> Transition In </th>
		<th> Transition Out </th>
		<th> Next State  </th> 
	</tr>
	<tr>
		<td> Stopping<b>-or-</b>Clearing </td>
		<td> State Complete <i>(Stopping<b>-or-</b>Clearing)</i></td> 
		<td> Reset Command </td>
		<td> Resetting </td> 
	</tr>
</table>
This method is called as required by <c>StateControl()</c>
</description> 

*)]]></Declaration>
      <Implementation>
        <ST><![CDATA[]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_GantryXY">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXY.Aborted">
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXY.CreateEvents">
      <LineId Id="3" Count="6" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXY.CyclicLogic">
      <LineId Id="3" Count="5" />
      <LineId Id="12" Count="4" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXY.Execute">
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXY.Idle">
      <LineId Id="23" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXY.Initialize">
      <LineId Id="3" Count="10" />
      <LineId Id="41" Count="5" />
      <LineId Id="48" Count="0" />
      <LineId Id="51" Count="7" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXY.Starting">
      <LineId Id="26" Count="0" />
    </LineIds>
    <LineIds Name="FB_GantryXY.Stopped">
      <LineId Id="23" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>